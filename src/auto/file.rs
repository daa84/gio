// This file was generated by gir (d121f7e) from gir-files (71d73f0)
// DO NOT EDIT

use Error;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use std;
use std::ptr;

glib_wrapper! {
    pub struct File(Object<ffi::GFile>);

    match fn {
        get_type => || ffi::g_file_get_type(),
    }
}

impl File {
    pub fn new_for_commandline_arg(arg: &str) -> File {
        unsafe {
            from_glib_full(ffi::g_file_new_for_commandline_arg(arg.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_36")]
    pub fn new_for_commandline_arg_and_cwd<P: AsRef<std::path::Path>>(arg: &str, cwd: P) -> File {
        unsafe {
            from_glib_full(ffi::g_file_new_for_commandline_arg_and_cwd(arg.to_glib_none().0, cwd.as_ref().to_glib_none().0))
        }
    }

    pub fn new_for_path<P: AsRef<std::path::Path>>(path: P) -> File {
        unsafe {
            from_glib_full(ffi::g_file_new_for_path(path.as_ref().to_glib_none().0))
        }
    }

    pub fn new_for_uri(uri: &str) -> File {
        unsafe {
            from_glib_full(ffi::g_file_new_for_uri(uri.to_glib_none().0))
        }
    }

    //pub fn new_tmp<P: AsRef<std::path::Path>>(tmpl: P, iostream: /*Ignored*/FileIOStream) -> Result<File, Error> {
    //    unsafe { TODO: call ffi::g_file_new_tmp() }
    //}

    pub fn parse_name(parse_name: &str) -> Option<File> {
        unsafe {
            from_glib_full(ffi::g_file_parse_name(parse_name.to_glib_none().0))
        }
    }
}

pub trait FileExt {
    //fn append_to<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileCreateFlags, cancellable: P) -> Result</*Ignored*/FileOutputStream, Error>;

    //fn append_to_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/FileCreateFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn append_to_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileOutputStream, Error>;

    //fn copy<'a, 'b, P: IsA<File>, Q: Into<Option<&'a /*Ignored*/Cancellable>>, R: Into<Option<&'b /*Unimplemented*/FileProgressCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, destination: &P, flags: /*Ignored*/FileCopyFlags, cancellable: Q, progress_callback: R, progress_callback_data: S) -> Result<(), Error>;

    //fn copy_async<'a, 'b, 'c, P: IsA<File>, Q: Into<Option<&'a /*Ignored*/Cancellable>>, R: Into<Option<&'b /*Unimplemented*/FileProgressCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>, T: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, U: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, destination: &P, flags: /*Ignored*/FileCopyFlags, io_priority: i32, cancellable: Q, progress_callback: R, progress_callback_data: S, callback: T, user_data: U);

    //fn copy_attributes<'a, P: IsA<File>, Q: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, destination: &P, flags: /*Ignored*/FileCopyFlags, cancellable: Q) -> Result<(), Error>;

    //fn copy_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result<(), Error>;

    //fn create<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileCreateFlags, cancellable: P) -> Result</*Ignored*/FileOutputStream, Error>;

    //fn create_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/FileCreateFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn create_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileOutputStream, Error>;

    //fn create_readwrite<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileCreateFlags, cancellable: P) -> Result</*Ignored*/FileIOStream, Error>;

    //fn create_readwrite_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/FileCreateFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn create_readwrite_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileIOStream, Error>;

    //fn delete<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result<(), Error>;

    //#[cfg(feature = "v2_34")]
    //fn delete_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //#[cfg(feature = "v2_34")]
    //fn delete_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    fn dup(&self) -> Option<File>;

    //fn eject_mountable<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, cancellable: P, callback: Q, user_data: R);

    //fn eject_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    //fn eject_mountable_with_operation<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S);

    //fn eject_mountable_with_operation_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    //fn enumerate_children<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attributes: &str, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result</*Ignored*/FileEnumerator, Error>;

    //fn enumerate_children_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, attributes: &str, flags: /*Ignored*/FileQueryInfoFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn enumerate_children_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileEnumerator, Error>;

    fn equal<P: IsA<File>>(&self, file2: &P) -> bool;

    //fn find_enclosing_mount<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result</*Ignored*/Mount, Error>;

    //fn find_enclosing_mount_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn find_enclosing_mount_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/Mount, Error>;

    fn get_basename(&self) -> Option<std::path::PathBuf>;

    fn get_child<P: AsRef<std::path::Path>>(&self, name: P) -> Option<File>;

    fn get_child_for_display_name(&self, display_name: &str) -> Result<File, Error>;

    fn get_parent(&self) -> Option<File>;

    fn get_parse_name(&self) -> Option<String>;

    fn get_path(&self) -> Option<std::path::PathBuf>;

    fn get_relative_path<P: IsA<File>>(&self, descendant: &P) -> Option<std::path::PathBuf>;

    fn get_uri(&self) -> Option<String>;

    fn get_uri_scheme(&self) -> Option<String>;

    fn has_parent<'a, P: IsA<File> + 'a, Q: Into<Option<&'a P>>>(&self, parent: Q) -> bool;

    fn has_prefix<P: IsA<File>>(&self, prefix: &P) -> bool;

    fn has_uri_scheme(&self, uri_scheme: &str) -> bool;

    fn is_native(&self) -> bool;

    //fn load_contents<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P, contents: /*Unimplemented*/CArray TypeId { ns_id: 0, id: 3 }, etag_out: /*Unimplemented*/String) -> Result</*Unimplemented*/Fundamental: Size, Error>;

    //fn load_contents_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, callback: Q, user_data: R);

    //fn load_contents_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P, contents: /*Unimplemented*/CArray TypeId { ns_id: 0, id: 3 }, etag_out: /*Unimplemented*/String) -> Result</*Unimplemented*/Fundamental: Size, Error>;

    //fn load_partial_contents_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, read_more_callback: /*Unknown conversion*//*Unimplemented*/FileReadMoreCallback, callback: Q, user_data: R);

    //fn load_partial_contents_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P, contents: /*Unimplemented*/CArray TypeId { ns_id: 0, id: 3 }, etag_out: /*Unimplemented*/String) -> Result</*Unimplemented*/Fundamental: Size, Error>;

    //fn make_directory<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result<(), Error>;

    //#[cfg(feature = "v2_38")]
    //fn make_directory_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //#[cfg(feature = "v2_38")]
    //fn make_directory_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    //fn make_directory_with_parents<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result<(), Error>;

    //fn make_symbolic_link<'a, P: AsRef<std::path::Path>, Q: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, symlink_value: P, cancellable: Q) -> Result<(), Error>;

    //#[cfg(feature = "v2_38")]
    //fn measure_disk_usage<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/FileMeasureProgressCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/FileMeasureFlags, cancellable: P, progress_callback: Q, progress_data: R) -> Result<(u64, u64, u64), Error>;

    //#[cfg(feature = "v2_38")]
    //fn measure_disk_usage_async<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/FileMeasureProgressCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>, S: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, T: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/FileMeasureFlags, io_priority: i32, cancellable: P, progress_callback: Q, progress_data: R, callback: S, user_data: T);

    //#[cfg(feature = "v2_38")]
    //fn measure_disk_usage_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(u64, u64, u64), Error>;

    //fn monitor<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileMonitorFlags, cancellable: P) -> Result</*Ignored*/FileMonitor, Error>;

    //fn monitor_directory<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileMonitorFlags, cancellable: P) -> Result</*Ignored*/FileMonitor, Error>;

    //fn monitor_file<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileMonitorFlags, cancellable: P) -> Result</*Ignored*/FileMonitor, Error>;

    //fn mount_enclosing_volume<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountMountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S);

    //fn mount_enclosing_volume_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    //fn mount_mountable<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountMountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S);

    //fn mount_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<File, Error>;

    //fn move_<'a, 'b, P: IsA<File>, Q: Into<Option<&'a /*Ignored*/Cancellable>>, R: Into<Option<&'b /*Unimplemented*/FileProgressCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, destination: &P, flags: /*Ignored*/FileCopyFlags, cancellable: Q, progress_callback: R, progress_callback_data: S) -> Result<(), Error>;

    //fn open_readwrite<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result</*Ignored*/FileIOStream, Error>;

    //fn open_readwrite_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn open_readwrite_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileIOStream, Error>;

    //fn poll_mountable<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, callback: Q, user_data: R);

    //fn poll_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    //fn query_default_handler<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result<AppInfo, Error>;

    //fn query_exists<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> bool;

    //fn query_file_type<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> /*Ignored*/FileType;

    //fn query_filesystem_info<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attributes: &str, cancellable: P) -> Result</*Ignored*/FileInfo, Error>;

    //fn query_filesystem_info_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, attributes: &str, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn query_filesystem_info_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileInfo, Error>;

    //fn query_info<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attributes: &str, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result</*Ignored*/FileInfo, Error>;

    //fn query_info_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, attributes: &str, flags: /*Ignored*/FileQueryInfoFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn query_info_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileInfo, Error>;

    //fn query_settable_attributes<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result</*Ignored*/FileAttributeInfoList, Error>;

    //fn query_writable_namespaces<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result</*Ignored*/FileAttributeInfoList, Error>;

    //fn read<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result</*Ignored*/FileInputStream, Error>;

    //fn read_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn read_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileInputStream, Error>;

    //fn replace<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>>(&self, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, cancellable: Q) -> Result</*Ignored*/FileOutputStream, Error>;

    //fn replace_async<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, io_priority: i32, cancellable: Q, callback: R, user_data: S);

    //fn replace_contents<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>>(&self, contents: /*Unimplemented*/&CArray TypeId { ns_id: 0, id: 3 }, length: /*Unimplemented*/Fundamental: Size, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, new_etag: /*Unimplemented*/String, cancellable: Q) -> Result<(), Error>;

    //fn replace_contents_async<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, contents: /*Unimplemented*/&CArray TypeId { ns_id: 0, id: 3 }, length: /*Unimplemented*/Fundamental: Size, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, cancellable: Q, callback: R, user_data: S);

    //#[cfg(feature = "v2_40")]
    //fn replace_contents_bytes_async<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, contents: &glib::Bytes, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, cancellable: Q, callback: R, user_data: S);

    //fn replace_contents_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P, new_etag: /*Unimplemented*/String) -> Result<(), Error>;

    //fn replace_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileOutputStream, Error>;

    //fn replace_readwrite<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>>(&self, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, cancellable: Q) -> Result</*Ignored*/FileIOStream, Error>;

    //fn replace_readwrite_async<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, io_priority: i32, cancellable: Q, callback: R, user_data: S);

    //fn replace_readwrite_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileIOStream, Error>;

    fn resolve_relative_path<P: AsRef<std::path::Path>>(&self, relative_path: P) -> Option<File>;

    //fn set_attribute<'a, P: Into<Option</*Unimplemented*/Fundamental: Pointer>>, Q: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, type_: /*Ignored*/FileAttributeType, value_p: P, flags: /*Ignored*/FileQueryInfoFlags, cancellable: Q) -> Result<(), Error>;

    //fn set_attribute_byte_string<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: &str, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error>;

    //fn set_attribute_int32<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: i32, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error>;

    //fn set_attribute_int64<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: i64, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error>;

    //fn set_attribute_string<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: &str, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error>;

    //fn set_attribute_uint32<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: u32, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error>;

    //fn set_attribute_uint64<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: u64, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error>;

    //fn set_attributes_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, info: /*Ignored*/&FileInfo, flags: /*Ignored*/FileQueryInfoFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn set_attributes_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P, info: /*Ignored*/FileInfo) -> Result<(), Error>;

    //fn set_attributes_from_info<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, info: /*Ignored*/&FileInfo, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error>;

    //fn set_display_name<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, display_name: &str, cancellable: P) -> Result<File, Error>;

    //fn set_display_name_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, display_name: &str, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //fn set_display_name_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result<File, Error>;

    //fn start_mountable<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/DriveStartFlags, start_operation: P, cancellable: Q, callback: R, user_data: S);

    //fn start_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    //fn stop_mountable<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S);

    //fn stop_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    fn supports_thread_contexts(&self) -> bool;

    //fn trash<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result<(), Error>;

    //#[cfg(feature = "v2_38")]
    //fn trash_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R);

    //#[cfg(feature = "v2_38")]
    //fn trash_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    //fn unmount_mountable<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, cancellable: P, callback: Q, user_data: R);

    //fn unmount_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    //fn unmount_mountable_with_operation<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S);

    //fn unmount_mountable_with_operation_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error>;
}

impl<O: IsA<File>> FileExt for O {
    //fn append_to<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileCreateFlags, cancellable: P) -> Result</*Ignored*/FileOutputStream, Error> {
    //    unsafe { TODO: call ffi::g_file_append_to() }
    //}

    //fn append_to_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/FileCreateFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_append_to_async() }
    //}

    //fn append_to_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileOutputStream, Error> {
    //    unsafe { TODO: call ffi::g_file_append_to_finish() }
    //}

    //fn copy<'a, 'b, P: IsA<File>, Q: Into<Option<&'a /*Ignored*/Cancellable>>, R: Into<Option<&'b /*Unimplemented*/FileProgressCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, destination: &P, flags: /*Ignored*/FileCopyFlags, cancellable: Q, progress_callback: R, progress_callback_data: S) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_copy() }
    //}

    //fn copy_async<'a, 'b, 'c, P: IsA<File>, Q: Into<Option<&'a /*Ignored*/Cancellable>>, R: Into<Option<&'b /*Unimplemented*/FileProgressCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>, T: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, U: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, destination: &P, flags: /*Ignored*/FileCopyFlags, io_priority: i32, cancellable: Q, progress_callback: R, progress_callback_data: S, callback: T, user_data: U) {
    //    unsafe { TODO: call ffi::g_file_copy_async() }
    //}

    //fn copy_attributes<'a, P: IsA<File>, Q: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, destination: &P, flags: /*Ignored*/FileCopyFlags, cancellable: Q) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_copy_attributes() }
    //}

    //fn copy_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_copy_finish() }
    //}

    //fn create<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileCreateFlags, cancellable: P) -> Result</*Ignored*/FileOutputStream, Error> {
    //    unsafe { TODO: call ffi::g_file_create() }
    //}

    //fn create_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/FileCreateFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_create_async() }
    //}

    //fn create_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileOutputStream, Error> {
    //    unsafe { TODO: call ffi::g_file_create_finish() }
    //}

    //fn create_readwrite<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileCreateFlags, cancellable: P) -> Result</*Ignored*/FileIOStream, Error> {
    //    unsafe { TODO: call ffi::g_file_create_readwrite() }
    //}

    //fn create_readwrite_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/FileCreateFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_create_readwrite_async() }
    //}

    //fn create_readwrite_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileIOStream, Error> {
    //    unsafe { TODO: call ffi::g_file_create_readwrite_finish() }
    //}

    //fn delete<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_delete() }
    //}

    //#[cfg(feature = "v2_34")]
    //fn delete_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_delete_async() }
    //}

    //#[cfg(feature = "v2_34")]
    //fn delete_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_delete_finish() }
    //}

    fn dup(&self) -> Option<File> {
        unsafe {
            from_glib_full(ffi::g_file_dup(self.to_glib_none().0))
        }
    }

    //fn eject_mountable<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_eject_mountable() }
    //}

    //fn eject_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_eject_mountable_finish() }
    //}

    //fn eject_mountable_with_operation<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_file_eject_mountable_with_operation() }
    //}

    //fn eject_mountable_with_operation_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_eject_mountable_with_operation_finish() }
    //}

    //fn enumerate_children<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attributes: &str, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result</*Ignored*/FileEnumerator, Error> {
    //    unsafe { TODO: call ffi::g_file_enumerate_children() }
    //}

    //fn enumerate_children_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, attributes: &str, flags: /*Ignored*/FileQueryInfoFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_enumerate_children_async() }
    //}

    //fn enumerate_children_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileEnumerator, Error> {
    //    unsafe { TODO: call ffi::g_file_enumerate_children_finish() }
    //}

    fn equal<P: IsA<File>>(&self, file2: &P) -> bool {
        unsafe {
            from_glib(ffi::g_file_equal(self.to_glib_none().0, file2.to_glib_none().0))
        }
    }

    //fn find_enclosing_mount<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result</*Ignored*/Mount, Error> {
    //    unsafe { TODO: call ffi::g_file_find_enclosing_mount() }
    //}

    //fn find_enclosing_mount_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_find_enclosing_mount_async() }
    //}

    //fn find_enclosing_mount_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/Mount, Error> {
    //    unsafe { TODO: call ffi::g_file_find_enclosing_mount_finish() }
    //}

    fn get_basename(&self) -> Option<std::path::PathBuf> {
        unsafe {
            from_glib_full(ffi::g_file_get_basename(self.to_glib_none().0))
        }
    }

    fn get_child<P: AsRef<std::path::Path>>(&self, name: P) -> Option<File> {
        unsafe {
            from_glib_full(ffi::g_file_get_child(self.to_glib_none().0, name.as_ref().to_glib_none().0))
        }
    }

    fn get_child_for_display_name(&self, display_name: &str) -> Result<File, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_file_get_child_for_display_name(self.to_glib_none().0, display_name.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_parent(&self) -> Option<File> {
        unsafe {
            from_glib_full(ffi::g_file_get_parent(self.to_glib_none().0))
        }
    }

    fn get_parse_name(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::g_file_get_parse_name(self.to_glib_none().0))
        }
    }

    fn get_path(&self) -> Option<std::path::PathBuf> {
        unsafe {
            from_glib_full(ffi::g_file_get_path(self.to_glib_none().0))
        }
    }

    fn get_relative_path<P: IsA<File>>(&self, descendant: &P) -> Option<std::path::PathBuf> {
        unsafe {
            from_glib_full(ffi::g_file_get_relative_path(self.to_glib_none().0, descendant.to_glib_none().0))
        }
    }

    fn get_uri(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::g_file_get_uri(self.to_glib_none().0))
        }
    }

    fn get_uri_scheme(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::g_file_get_uri_scheme(self.to_glib_none().0))
        }
    }

    fn has_parent<'a, P: IsA<File> + 'a, Q: Into<Option<&'a P>>>(&self, parent: Q) -> bool {
        let parent = parent.into();
        let parent = parent.to_glib_none();
        unsafe {
            from_glib(ffi::g_file_has_parent(self.to_glib_none().0, parent.0))
        }
    }

    fn has_prefix<P: IsA<File>>(&self, prefix: &P) -> bool {
        unsafe {
            from_glib(ffi::g_file_has_prefix(self.to_glib_none().0, prefix.to_glib_none().0))
        }
    }

    fn has_uri_scheme(&self, uri_scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::g_file_has_uri_scheme(self.to_glib_none().0, uri_scheme.to_glib_none().0))
        }
    }

    fn is_native(&self) -> bool {
        unsafe {
            from_glib(ffi::g_file_is_native(self.to_glib_none().0))
        }
    }

    //fn load_contents<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P, contents: /*Unimplemented*/CArray TypeId { ns_id: 0, id: 3 }, etag_out: /*Unimplemented*/String) -> Result</*Unimplemented*/Fundamental: Size, Error> {
    //    unsafe { TODO: call ffi::g_file_load_contents() }
    //}

    //fn load_contents_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_load_contents_async() }
    //}

    //fn load_contents_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P, contents: /*Unimplemented*/CArray TypeId { ns_id: 0, id: 3 }, etag_out: /*Unimplemented*/String) -> Result</*Unimplemented*/Fundamental: Size, Error> {
    //    unsafe { TODO: call ffi::g_file_load_contents_finish() }
    //}

    //fn load_partial_contents_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, read_more_callback: /*Unknown conversion*//*Unimplemented*/FileReadMoreCallback, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_load_partial_contents_async() }
    //}

    //fn load_partial_contents_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P, contents: /*Unimplemented*/CArray TypeId { ns_id: 0, id: 3 }, etag_out: /*Unimplemented*/String) -> Result</*Unimplemented*/Fundamental: Size, Error> {
    //    unsafe { TODO: call ffi::g_file_load_partial_contents_finish() }
    //}

    //fn make_directory<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_make_directory() }
    //}

    //#[cfg(feature = "v2_38")]
    //fn make_directory_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_make_directory_async() }
    //}

    //#[cfg(feature = "v2_38")]
    //fn make_directory_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_make_directory_finish() }
    //}

    //fn make_directory_with_parents<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_make_directory_with_parents() }
    //}

    //fn make_symbolic_link<'a, P: AsRef<std::path::Path>, Q: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, symlink_value: P, cancellable: Q) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_make_symbolic_link() }
    //}

    //#[cfg(feature = "v2_38")]
    //fn measure_disk_usage<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/FileMeasureProgressCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/FileMeasureFlags, cancellable: P, progress_callback: Q, progress_data: R) -> Result<(u64, u64, u64), Error> {
    //    unsafe { TODO: call ffi::g_file_measure_disk_usage() }
    //}

    //#[cfg(feature = "v2_38")]
    //fn measure_disk_usage_async<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/FileMeasureProgressCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>, S: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, T: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/FileMeasureFlags, io_priority: i32, cancellable: P, progress_callback: Q, progress_data: R, callback: S, user_data: T) {
    //    unsafe { TODO: call ffi::g_file_measure_disk_usage_async() }
    //}

    //#[cfg(feature = "v2_38")]
    //fn measure_disk_usage_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(u64, u64, u64), Error> {
    //    unsafe { TODO: call ffi::g_file_measure_disk_usage_finish() }
    //}

    //fn monitor<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileMonitorFlags, cancellable: P) -> Result</*Ignored*/FileMonitor, Error> {
    //    unsafe { TODO: call ffi::g_file_monitor() }
    //}

    //fn monitor_directory<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileMonitorFlags, cancellable: P) -> Result</*Ignored*/FileMonitor, Error> {
    //    unsafe { TODO: call ffi::g_file_monitor_directory() }
    //}

    //fn monitor_file<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileMonitorFlags, cancellable: P) -> Result</*Ignored*/FileMonitor, Error> {
    //    unsafe { TODO: call ffi::g_file_monitor_file() }
    //}

    //fn mount_enclosing_volume<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountMountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_file_mount_enclosing_volume() }
    //}

    //fn mount_enclosing_volume_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_mount_enclosing_volume_finish() }
    //}

    //fn mount_mountable<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountMountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_file_mount_mountable() }
    //}

    //fn mount_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<File, Error> {
    //    unsafe { TODO: call ffi::g_file_mount_mountable_finish() }
    //}

    //fn move_<'a, 'b, P: IsA<File>, Q: Into<Option<&'a /*Ignored*/Cancellable>>, R: Into<Option<&'b /*Unimplemented*/FileProgressCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, destination: &P, flags: /*Ignored*/FileCopyFlags, cancellable: Q, progress_callback: R, progress_callback_data: S) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_move() }
    //}

    //fn open_readwrite<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result</*Ignored*/FileIOStream, Error> {
    //    unsafe { TODO: call ffi::g_file_open_readwrite() }
    //}

    //fn open_readwrite_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_open_readwrite_async() }
    //}

    //fn open_readwrite_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileIOStream, Error> {
    //    unsafe { TODO: call ffi::g_file_open_readwrite_finish() }
    //}

    //fn poll_mountable<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_poll_mountable() }
    //}

    //fn poll_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_poll_mountable_finish() }
    //}

    //fn query_default_handler<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result<AppInfo, Error> {
    //    unsafe { TODO: call ffi::g_file_query_default_handler() }
    //}

    //fn query_exists<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> bool {
    //    unsafe { TODO: call ffi::g_file_query_exists() }
    //}

    //fn query_file_type<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> /*Ignored*/FileType {
    //    unsafe { TODO: call ffi::g_file_query_file_type() }
    //}

    //fn query_filesystem_info<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attributes: &str, cancellable: P) -> Result</*Ignored*/FileInfo, Error> {
    //    unsafe { TODO: call ffi::g_file_query_filesystem_info() }
    //}

    //fn query_filesystem_info_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, attributes: &str, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_query_filesystem_info_async() }
    //}

    //fn query_filesystem_info_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileInfo, Error> {
    //    unsafe { TODO: call ffi::g_file_query_filesystem_info_finish() }
    //}

    //fn query_info<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attributes: &str, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result</*Ignored*/FileInfo, Error> {
    //    unsafe { TODO: call ffi::g_file_query_info() }
    //}

    //fn query_info_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, attributes: &str, flags: /*Ignored*/FileQueryInfoFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_query_info_async() }
    //}

    //fn query_info_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileInfo, Error> {
    //    unsafe { TODO: call ffi::g_file_query_info_finish() }
    //}

    //fn query_settable_attributes<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result</*Ignored*/FileAttributeInfoList, Error> {
    //    unsafe { TODO: call ffi::g_file_query_settable_attributes() }
    //}

    //fn query_writable_namespaces<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result</*Ignored*/FileAttributeInfoList, Error> {
    //    unsafe { TODO: call ffi::g_file_query_writable_namespaces() }
    //}

    //fn read<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result</*Ignored*/FileInputStream, Error> {
    //    unsafe { TODO: call ffi::g_file_read() }
    //}

    //fn read_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_read_async() }
    //}

    //fn read_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileInputStream, Error> {
    //    unsafe { TODO: call ffi::g_file_read_finish() }
    //}

    //fn replace<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>>(&self, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, cancellable: Q) -> Result</*Ignored*/FileOutputStream, Error> {
    //    unsafe { TODO: call ffi::g_file_replace() }
    //}

    //fn replace_async<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, io_priority: i32, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_file_replace_async() }
    //}

    //fn replace_contents<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>>(&self, contents: /*Unimplemented*/&CArray TypeId { ns_id: 0, id: 3 }, length: /*Unimplemented*/Fundamental: Size, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, new_etag: /*Unimplemented*/String, cancellable: Q) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_replace_contents() }
    //}

    //fn replace_contents_async<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, contents: /*Unimplemented*/&CArray TypeId { ns_id: 0, id: 3 }, length: /*Unimplemented*/Fundamental: Size, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_file_replace_contents_async() }
    //}

    //#[cfg(feature = "v2_40")]
    //fn replace_contents_bytes_async<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, contents: &glib::Bytes, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_file_replace_contents_bytes_async() }
    //}

    //fn replace_contents_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P, new_etag: /*Unimplemented*/String) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_replace_contents_finish() }
    //}

    //fn replace_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileOutputStream, Error> {
    //    unsafe { TODO: call ffi::g_file_replace_finish() }
    //}

    //fn replace_readwrite<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>>(&self, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, cancellable: Q) -> Result</*Ignored*/FileIOStream, Error> {
    //    unsafe { TODO: call ffi::g_file_replace_readwrite() }
    //}

    //fn replace_readwrite_async<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, etag: P, make_backup: bool, flags: /*Ignored*/FileCreateFlags, io_priority: i32, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_file_replace_readwrite_async() }
    //}

    //fn replace_readwrite_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result</*Ignored*/FileIOStream, Error> {
    //    unsafe { TODO: call ffi::g_file_replace_readwrite_finish() }
    //}

    fn resolve_relative_path<P: AsRef<std::path::Path>>(&self, relative_path: P) -> Option<File> {
        unsafe {
            from_glib_full(ffi::g_file_resolve_relative_path(self.to_glib_none().0, relative_path.as_ref().to_glib_none().0))
        }
    }

    //fn set_attribute<'a, P: Into<Option</*Unimplemented*/Fundamental: Pointer>>, Q: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, type_: /*Ignored*/FileAttributeType, value_p: P, flags: /*Ignored*/FileQueryInfoFlags, cancellable: Q) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_set_attribute() }
    //}

    //fn set_attribute_byte_string<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: &str, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_set_attribute_byte_string() }
    //}

    //fn set_attribute_int32<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: i32, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_set_attribute_int32() }
    //}

    //fn set_attribute_int64<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: i64, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_set_attribute_int64() }
    //}

    //fn set_attribute_string<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: &str, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_set_attribute_string() }
    //}

    //fn set_attribute_uint32<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: u32, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_set_attribute_uint32() }
    //}

    //fn set_attribute_uint64<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, attribute: &str, value: u64, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_set_attribute_uint64() }
    //}

    //fn set_attributes_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, info: /*Ignored*/&FileInfo, flags: /*Ignored*/FileQueryInfoFlags, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_set_attributes_async() }
    //}

    //fn set_attributes_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P, info: /*Ignored*/FileInfo) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_set_attributes_finish() }
    //}

    //fn set_attributes_from_info<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, info: /*Ignored*/&FileInfo, flags: /*Ignored*/FileQueryInfoFlags, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_set_attributes_from_info() }
    //}

    //fn set_display_name<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, display_name: &str, cancellable: P) -> Result<File, Error> {
    //    unsafe { TODO: call ffi::g_file_set_display_name() }
    //}

    //fn set_display_name_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, display_name: &str, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_set_display_name_async() }
    //}

    //fn set_display_name_finish<P: IsA</*Ignored*/AsyncResult>>(&self, res: &P) -> Result<File, Error> {
    //    unsafe { TODO: call ffi::g_file_set_display_name_finish() }
    //}

    //fn start_mountable<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/DriveStartFlags, start_operation: P, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_file_start_mountable() }
    //}

    //fn start_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_start_mountable_finish() }
    //}

    //fn stop_mountable<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_file_stop_mountable() }
    //}

    //fn stop_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_stop_mountable_finish() }
    //}

    fn supports_thread_contexts(&self) -> bool {
        unsafe {
            from_glib(ffi::g_file_supports_thread_contexts(self.to_glib_none().0))
        }
    }

    //fn trash<'a, P: Into<Option<&'a /*Ignored*/Cancellable>>>(&self, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_trash() }
    //}

    //#[cfg(feature = "v2_38")]
    //fn trash_async<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, io_priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_trash_async() }
    //}

    //#[cfg(feature = "v2_38")]
    //fn trash_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_trash_finish() }
    //}

    //fn unmount_mountable<'a, 'b, P: Into<Option<&'a /*Ignored*/Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_file_unmount_mountable() }
    //}

    //fn unmount_mountable_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_unmount_mountable_finish() }
    //}

    //fn unmount_mountable_with_operation<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/MountOperation>>, Q: Into<Option<&'b /*Ignored*/Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_file_unmount_mountable_with_operation() }
    //}

    //fn unmount_mountable_with_operation_finish<P: IsA</*Ignored*/AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_file_unmount_mountable_with_operation_finish() }
    //}
}
